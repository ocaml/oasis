# You may modify this file freely. It is not overwritten by oasis
# setup once it exists.

# Include OASIS library:

if $(not $(file-exists _oasis_lib.om))
    err. =
        extends $(Exception)
        message = $'Not set up. Run first: oasis setup'
    raise $(err)

include _oasis_lib.om

# Include generated settings (from setup.data)
# e.g. BYTE_ENABLED etc.
# This file only exists when the configure step is succcessful.

include _oasis_setup.om

# Until this point we allow to override variables via the command-line
DefineCommandVars()

# global phonies
.PHONY: build install
.DEFAULT: build

# Define hierarchy (OASIS_SUBDIRS)
include _oasis_hier.om

# subdirectories
.SUBDIRS: $(OASIS_SUBDIRS)

# local phonies
.PHONY: build-here install-here pre-install-here

# At this point you may set any of the EXTRA variables defined in the .om files:
#
# EXTRA_OCAMLPACKS[] =
#    foo
#    bar
# EXTRA_OCAMLFLAGS = -syntax camlp4o
#
# In order to restrict such a variable to only a single library, executable, or
# object, append its name separated with an underscore, e.g.
#
# EXTRA_OCAMLPACKS_mylibrary[] =
#    baz

# Include definitions generated by OASIS

include _oasis_build.om
#include _oasis_install.om

# These calls define the rules needed for "build", "install", etc.

DefineBuildRules()
#DefineInstallRules()

# You may define additional build rules here.

# Modify flags for a module:
# OASIS_modify_OCAMLFINDFLAGS(module, -syntax camlp4o)
# OASIS_modify_OCAMLFLAGS(module, -warn-error +a)
# OASIS_modify_OCAMLOPTFLAGS(module, -p)
# OASIS_modify_OCAMLCFLAGS(module, -vmthread)
# OASIS_modify_OCAMLLEXFLAGS(module, -ml)
# OASIS_modify_OCAMLYACCFLAGS(module, -q)
# also for C variables

# entry points

build-here: $(BUILD_TARGETS)
#install-here: $(INSTALL_TARGETS)
#pre-install-here:

# Because these targets are global phonies they cover the whole
# directory hierarchy:

build: build-here
#install: install-here
